{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const contract = await getContract(web3);\n        setAccounts(accounts);\n        setSelectedAccount(accounts[0]); // Sélectionne automatiquement le premier compte\n        setContract(contract);\n      } catch (error) {\n        console.error(\"Could not connect to contract or chain.\");\n      }\n    };\n    init();\n  }, []);\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transferEther(recipient).send({\n          from: selectedAccount,\n          // Utilise le compte sélectionné\n          value: window.web3.utils.toWei(amount, \"ether\")\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfer Ether\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fromAccount\",\n      children: \"From:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fromAccount\",\n      value: selectedAccount,\n      onChange: e => setSelectedAccount(e.target.value),\n      children: accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account,\n        children: account\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipient Address\",\n      value: recipient,\n      onChange: e => setRecipient(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Amount (ETH)\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Send Ether\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gVEiiCeu//BzkO/V3LaVzHhOVtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","getContract","jsxDEV","_jsxDEV","App","_s","accounts","setAccounts","contract","setContract","selectedAccount","setSelectedAccount","recipient","setRecipient","amount","setAmount","message","setMessage","init","web3","eth","getAccounts","error","console","handleTransfer","methods","transferEther","send","from","value","window","utils","toWei","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","map","account","index","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\";\n\nconst App = () => {\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const contract = await getContract(web3);\n\n        setAccounts(accounts);\n        setSelectedAccount(accounts[0]); // Sélectionne automatiquement le premier compte\n        setContract(contract);\n      } catch (error) {\n        console.error(\"Could not connect to contract or chain.\");\n      }\n    };\n    init();\n  }, []);\n\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transferEther(recipient).send({\n          from: selectedAccount, // Utilise le compte sélectionné\n          value: window.web3.utils.toWei(amount, \"ether\"),\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transfer Ether</h1>\n      \n      <label htmlFor=\"fromAccount\">From:</label>\n      <select\n        id=\"fromAccount\"\n        value={selectedAccount}\n        onChange={(e) => setSelectedAccount(e.target.value)}\n      >\n        {accounts.map((account, index) => (\n          <option key={index} value={account}>\n            {account}\n          </option>\n        ))}\n      </select>\n      \n      <input\n        type=\"text\"\n        placeholder=\"Recipient Address\"\n        value={recipient}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Amount (ETH)\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleTransfer}>Send Ether</button>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}