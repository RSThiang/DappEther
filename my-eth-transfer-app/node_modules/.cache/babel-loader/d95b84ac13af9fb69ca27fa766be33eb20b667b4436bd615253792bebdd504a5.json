{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\"; // Assurez-vous que cela pointe vers votre propre fichier web3.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [contractBalance, setContractBalance] = useState(0);\n  const [contractAddress, setContractAddress] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // Ajoutez cet état pour stocker l'instance web3\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = await getWeb3(); // Obtenir Web3\n        const accounts = await web3Instance.eth.getAccounts(); // Récupérer les comptes\n        const contractInstance = await getContract(web3Instance); // Obtenir le contrat\n\n        setAccounts(accounts); // Définir les comptes dans l'état\n        setSelectedAccount(accounts[0]); // Sélectionner le premier compte par défaut\n        setContract(contractInstance); // Définir le contrat dans l'état\n        setContractAddress(contractInstance.options.address); // Obtenir l'adresse du contrat\n\n        // Récupérer le solde du contrat\n        const balance = await contractInstance.methods.getBalance().call(); // Appeler getBalance\n        setContractBalance(balance); // Définir le solde du contrat dans l'état\n        setWeb3(web3Instance); // Stocker l'instance de web3\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transfer(recipient).send({\n          from: selectedAccount,\n          value: web3.utils.toWei(amount, \"ether\") // Utiliser l'instance web3\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n\n        // Mettre à jour le solde du contrat après le transfert\n        const balance = await contract.methods.getBalance().call();\n        setContractBalance(balance);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ETH Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fromAccount\",\n      children: \"From:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fromAccount\",\n      value: selectedAccount,\n      onChange: e => setSelectedAccount(e.target.value),\n      children: accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account,\n        children: `Account ${index + 1}: ${account}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipient Address\",\n      value: recipient,\n      onChange: e => setRecipient(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Amount (ETH)\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Send Ether\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Contract Address: \", contractAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Contract Balance: \", web3 ? web3.utils.fromWei(contractBalance, \"ether\") : 0, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uY7APqwA7Qz5tYxeq2phHCRk3Ns=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","getContract","jsxDEV","_jsxDEV","App","_s","accounts","setAccounts","contract","setContract","selectedAccount","setSelectedAccount","recipient","setRecipient","amount","setAmount","message","setMessage","contractBalance","setContractBalance","contractAddress","setContractAddress","web3","setWeb3","init","web3Instance","eth","getAccounts","contractInstance","options","address","balance","methods","getBalance","call","error","console","handleTransfer","transfer","send","from","value","utils","toWei","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","map","account","index","type","placeholder","onClick","fromWei","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\"; // Assurez-vous que cela pointe vers votre propre fichier web3.js\n\nconst App = () => {\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [contractBalance, setContractBalance] = useState(0);\n  const [contractAddress, setContractAddress] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // Ajoutez cet état pour stocker l'instance web3\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = await getWeb3(); // Obtenir Web3\n        const accounts = await web3Instance.eth.getAccounts(); // Récupérer les comptes\n        const contractInstance = await getContract(web3Instance); // Obtenir le contrat\n\n        setAccounts(accounts); // Définir les comptes dans l'état\n        setSelectedAccount(accounts[0]); // Sélectionner le premier compte par défaut\n        setContract(contractInstance); // Définir le contrat dans l'état\n        setContractAddress(contractInstance.options.address); // Obtenir l'adresse du contrat\n\n        // Récupérer le solde du contrat\n        const balance = await contractInstance.methods.getBalance().call(); // Appeler getBalance\n        setContractBalance(balance); // Définir le solde du contrat dans l'état\n        setWeb3(web3Instance); // Stocker l'instance de web3\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transfer(recipient).send({\n          from: selectedAccount,\n          value: web3.utils.toWei(amount, \"ether\"), // Utiliser l'instance web3\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n\n        // Mettre à jour le solde du contrat après le transfert\n        const balance = await contract.methods.getBalance().call();\n        setContractBalance(balance);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>ETH Transfer</h1>\n      <label htmlFor=\"fromAccount\">From:</label>\n      <select\n        id=\"fromAccount\"\n        value={selectedAccount}\n        onChange={(e) => setSelectedAccount(e.target.value)}\n      >\n        {accounts.map((account, index) => (\n          <option key={index} value={account}>\n            {`Account ${index + 1}: ${account}`}\n          </option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        placeholder=\"Recipient Address\"\n        value={recipient}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Amount (ETH)\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleTransfer}>Send Ether</button>\n      <p>{message}</p>\n      <h2>Contract Address: {contractAddress}</h2>\n      <h2>Contract Balance: {web3 ? web3.utils.fromWei(contractBalance, \"ether\") : 0} ETH</h2>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}