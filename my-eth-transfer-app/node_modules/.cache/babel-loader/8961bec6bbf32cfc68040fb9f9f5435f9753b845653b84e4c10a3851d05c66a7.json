{"ast":null,"code":"import Web3 from \"web3\";\nimport SimpleTransfer from \"./contracts/SimpleTransfer.json\";\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          }); // Demander l'autorisation de MetaMask\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use Ganache\n      else {\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Ganache\");\n        resolve(web3);\n      }\n    });\n  });\n};\nconst getContract = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = SimpleTransfer.networks[networkId];\n  const instance = new web3.eth.Contract(SimpleTransfer.abi, deployedNetwork && deployedNetwork.address);\n  return instance;\n};\nexport { getWeb3, getContract };","map":{"version":3,"names":["Web3","SimpleTransfer","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","request","method","error","console","log","provider","providers","HttpProvider","getContract","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/web3.js"],"sourcesContent":["import Web3 from \"web3\";\r\nimport SimpleTransfer from \"./contracts/SimpleTransfer.json\";\r\n\r\nconst getWeb3 = () => {\r\n  return new Promise((resolve, reject) => {\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          await window.ethereum.request({ method: \"eth_requestAccounts\" }); // Demander l'autorisation de MetaMask\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use Ganache\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Ganache\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nconst getContract = async (web3) => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = SimpleTransfer.networks[networkId];\r\n  const instance = new web3.eth.Contract(\r\n    SimpleTransfer.abi,\r\n    deployedNetwork && deployedNetwork.address\r\n  );\r\n  return instance;\r\n};\r\n\r\nexport { getWeb3, getContract };\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,cAAc,MAAM,iCAAiC;AAE5D,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAY;MAC1C;MACA,IAAID,MAAM,CAACE,QAAQ,EAAE;QACnB,MAAMC,IAAI,GAAG,IAAIT,IAAI,CAACM,MAAM,CAACE,QAAQ,CAAC;QACtC,IAAI;UACF,MAAMF,MAAM,CAACE,QAAQ,CAACE,OAAO,CAAC;YAAEC,MAAM,EAAE;UAAsB,CAAC,CAAC,CAAC,CAAC;UAClEP,OAAO,CAACK,IAAI,CAAC;QACf,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdP,MAAM,CAACO,KAAK,CAAC;QACf;MACF;MACA;MAAA,KACK,IAAIN,MAAM,CAACG,IAAI,EAAE;QACpB,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAAI;QACxBI,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtCV,OAAO,CAACK,IAAI,CAAC;MACf;MACA;MAAA,KACK;QACH,MAAMM,QAAQ,GAAG,IAAIf,IAAI,CAACgB,SAAS,CAACC,YAAY,CAAC,uBAAuB,CAAC;QACzE,MAAMR,IAAI,GAAG,IAAIT,IAAI,CAACe,QAAQ,CAAC;QAC/BF,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvDV,OAAO,CAACK,IAAI,CAAC;MACf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,MAAMS,WAAW,GAAG,MAAOT,IAAI,IAAK;EAClC,MAAMU,SAAS,GAAG,MAAMV,IAAI,CAACW,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;EAC5C,MAAMC,eAAe,GAAGtB,cAAc,CAACuB,QAAQ,CAACL,SAAS,CAAC;EAC1D,MAAMM,QAAQ,GAAG,IAAIhB,IAAI,CAACW,GAAG,CAACM,QAAQ,CACpCzB,cAAc,CAAC0B,GAAG,EAClBJ,eAAe,IAAIA,eAAe,CAACK,OACrC,CAAC;EACD,OAAOH,QAAQ;AACjB,CAAC;AAED,SAASvB,OAAO,EAAEgB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}