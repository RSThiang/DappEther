{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"../contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Transfer = () => {\n  _s();\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n\n        // Récupérer tous les comptes de Ganache ou MetaMask\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(SimpleTransfer.abi, deployedNetwork && deployedNetwork.address);\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n  const loadTransactions = async (web3Instance, account) => {\n    const latestBlock = await web3Instance.eth.getBlockNumber();\n    const transactions = [];\n\n    // Parcourir les blocs récents pour trouver les transactions liées au compte\n    for (let i = latestBlock; i >= latestBlock - 100 && i >= 0; i--) {\n      // Limiter à 100 blocs pour des raisons de performance\n      const block = await web3Instance.eth.getBlock(i, true);\n      if (block && block.transactions) {\n        block.transactions.forEach(tx => {\n          if (tx.from === account || tx.to === account) {\n            // Filtrer les transactions associées à l'adresse\n            transactions.push(tx);\n          }\n        });\n      }\n    }\n    setTransactions(transactions); // Stocker les transactions dans l'état\n  };\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount,\n        // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\") // Convertir le montant en Wei\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n\n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n      await loadTransactions(web3, selectedAccount); // Recharger les transactions après le transfert\n    } catch (error) {\n      setMessage(\"Échec du transfert : \" + error.message);\n      console.error(error);\n    }\n  };\n  const handleTransactionClick = tx => {\n    setSelectedTransaction(tx); // Stocker la transaction sélectionnée pour afficher les détails\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Transfert de Cryptomonnaie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), !selectedAccount ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }),\n      children: \"Connecter le Compte Principal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Compte : \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Solde : \", accountBalance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: () => setFormOpen(true),\n        children: \"Faire un Transfert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-5\",\n        children: \"Transactions du Compte Principal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: transactions.length > 0 ? transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          onClick: () => handleTransactionClick(tx),\n          children: [tx.hash.substring(0, 20), \"... \", tx.value && web3.utils.fromWei(tx.value, \"ether\"), \" ETH\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Aucune transaction trouv\\xE9e.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), selectedTransaction && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-4 p-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"D\\xE9tails de la Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hash:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.hash]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"De:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.from]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\xC0:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.to]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Valeur:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.value && web3.utils.fromWei(selectedTransaction.value, \"ether\"), \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bloc:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.blockNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Transfer, \"iws0NMFJfbWAeaTmoPZzu29tv6I=\");\n_c = Transfer;\nexport default Transfer;\nvar _c;\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleTransfer","jsxDEV","_jsxDEV","Fragment","_Fragment","Transfer","_s","selectedAccount","setSelectedAccount","accounts","setAccounts","contract","setContract","accountBalance","setAccountBalance","recipient","setRecipient","amount","setAmount","message","setMessage","web3","setWeb3","transactions","setTransactions","selectedTransaction","setSelectedTransaction","init","web3Instance","window","ethereum","request","method","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","contractInstance","Contract","abi","address","length","balance","getBalance","utils","fromWei","loadTransactions","error","console","account","latestBlock","getBlockNumber","i","block","getBlock","forEach","tx","from","to","push","handleTransfer","value","Number","methods","transfer","send","toWei","handleTransactionClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","setFormOpen","map","index","hash","substring","blockNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"../contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\n\nconst Transfer = () => {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n        // Récupérer tous les comptes de Ganache ou MetaMask\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(\n          SimpleTransfer.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n\n  const loadTransactions = async (web3Instance, account) => {\n    const latestBlock = await web3Instance.eth.getBlockNumber();\n    const transactions = [];\n\n    // Parcourir les blocs récents pour trouver les transactions liées au compte\n    for (let i = latestBlock; i >= latestBlock - 100 && i >= 0; i--) {  // Limiter à 100 blocs pour des raisons de performance\n      const block = await web3Instance.eth.getBlock(i, true);\n      if (block && block.transactions) {\n        block.transactions.forEach((tx) => {\n          if (tx.from === account || tx.to === account) {  // Filtrer les transactions associées à l'adresse\n            transactions.push(tx);\n          }\n        });\n      }\n    }\n    setTransactions(transactions); // Stocker les transactions dans l'état\n  };\n\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount, // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\"), // Convertir le montant en Wei\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n      \n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n      await loadTransactions(web3, selectedAccount); // Recharger les transactions après le transfert\n    } catch (error) {\n      setMessage(\"Échec du transfert : \" + error.message);\n      console.error(error);\n    }\n  };\n\n  const handleTransactionClick = (tx) => {\n    setSelectedTransaction(tx); // Stocker la transaction sélectionnée pour afficher les détails\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center\">Transfert de Cryptomonnaie</h1>\n      {!selectedAccount ? (\n        <button className=\"btn btn-primary\" onClick={() => window.ethereum.request({ method: \"eth_requestAccounts\" })}>\n          Connecter le Compte Principal\n        </button>\n      ) : (\n        <>\n          <h2>Compte : {selectedAccount}</h2>\n          <h2>Solde : {accountBalance} ETH</h2>\n          <button className=\"btn btn-success\" onClick={() => setFormOpen(true)}>Faire un Transfert</button>\n          <p>{message}</p>\n\n          {/* Liste des transactions */}\n          <h3 className=\"mt-5\">Transactions du Compte Principal</h3>\n          <ul className=\"list-group\">\n            {transactions.length > 0 ? (\n              transactions.map((tx, index) => (\n                <li key={index} className=\"list-group-item\" onClick={() => handleTransactionClick(tx)}>\n                  {tx.hash.substring(0, 20)}... {tx.value && web3.utils.fromWei(tx.value, \"ether\")} ETH\n                </li>\n              ))\n            ) : (\n              <p>Aucune transaction trouvée.</p>\n            )}\n          </ul>\n\n          {/* Détails de la transaction sélectionnée */}\n          {selectedTransaction && (\n            <div className=\"card mt-4 p-3\">\n              <h4>Détails de la Transaction</h4>\n              <p><strong>Hash:</strong> {selectedTransaction.hash}</p>\n              <p><strong>De:</strong> {selectedTransaction.from}</p>\n              <p><strong>À:</strong> {selectedTransaction.to}</p>\n              <p><strong>Valeur:</strong> {selectedTransaction.value && web3.utils.fromWei(selectedTransaction.value, \"ether\")} ETH</p>\n              <p><strong>Bloc:</strong> {selectedTransaction.blockNumber}</p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Transfer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}