{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"./contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Transfer = () => {\n  _s();\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n  const [isFormOpen, setFormOpen] = useState(false); // État pour gérer l'affichage du formulaire\n  const [isDetail, setDetail] = useState(false);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n\n        // Récupérer tous les comptes de Ganache ou MetaMask\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(SimpleTransfer.abi, deployedNetwork && deployedNetwork.address);\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n  const loadTransactions = async (web3Instance, account) => {\n    try {\n      let latestBlock = await web3Instance.eth.getBlockNumber();\n      latestBlock = latestBlock.toString(); // Convertir en chaîne de caractères pour éviter les erreurs BigInt\n\n      //console.log(`Dernier bloc : ${latestBlock}`);\n\n      const transactions = [];\n\n      // Parcourir les blocs récents\n      for (let i = parseInt(latestBlock); i >= parseInt(latestBlock) - 100 && i >= 0; i--) {\n        const block = await web3Instance.eth.getBlock(i, true);\n\n        // Vérifier s'il y a des transactions dans le bloc\n        if (block && block.transactions.length > 0) {\n          //console.log(`Bloc numéro ${i} contient ${block.transactions.length} transactions`);\n\n          block.transactions.forEach(tx => {\n            // Afficher chaque transaction pour voir ses champs\n            //console.log(`Transaction trouvée :`, tx);\n\n            if (account.toLowerCase() === tx.from.toLowerCase()) {\n              const transactionDetails = {\n                hash: tx.hash,\n                from: tx.from,\n                to: tx.to,\n                value: web3Instance.utils.fromWei(tx.value, \"ether\"),\n                // Convertir en ETH\n                timestamp: block.timestamp,\n                // Récupérer le timestamp du bloc\n                blockNumber: i\n              };\n              transactions.push(transactionDetails);\n            }\n          });\n        }\n      }\n      setTransactions(transactions);\n      //console.log(`Transactions associées à l'adresse :`, transactions);\n      // Mettre à jour l'état avec les transactions trouvées\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au contrat ou à la blockchain :\", error);\n    }\n  };\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount,\n        // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\") // Utiliser l'instance de web3\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n\n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n    } catch (error) {\n      setMessage(\"Échec du transfert.\");\n      console.error(error);\n    }\n  };\n  const openForm = () => setFormOpen(true); // Ouvrir le formulaire de transfert\n  const closeForm = () => setFormOpen(false); // Fermer le formulaire de transfert\n  const closeDetail = () => setDetail(false);\n  const handleTransactionClick = tx => {\n    setSelectedTransaction(tx);\n    setDetail(true);\n    // Stocker la transaction sélectionnée pour afficher les détails\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Transfert de Cryptomonnaie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), !selectedAccount ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }),\n      children: \"Connecter le Compte Principal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Compte : \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Solde : \", accountBalance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: openForm,\n        children: \"Faire un Transfert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), isFormOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-popup show card p-4 mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Transf\\xE9rer des Ethers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Adresse du Destinataire:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select mb-3\",\n          value: recipient,\n          onChange: e => setRecipient(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"S\\xE9lectionnez une adresse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: account,\n            children: account\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Montant (ETH):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          className: \"form-control mb-3\",\n          value: amount,\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleTransfer,\n          children: \"Envoyer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger ms-2\",\n          onClick: closeForm,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-5\",\n        children: \"Transactions du Compte Principal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: transactions.length > 0 ? transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          onClick: () => handleTransactionClick(tx),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Hash :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 22\n            }, this), \" \", tx.hash.substring(0, 10), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Montant :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 22\n            }, this), \" \", tx.value, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Aucune transaction trouv\\xE9e.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), isDetail && selectedTransaction && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup show card p-4 mt-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"D\\xE9tails de la Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hash:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 8\n          }, this), \" \", selectedTransaction.hash]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\xC0:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 8\n          }, this), \" \", selectedTransaction.to]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Valeur:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 8\n          }, this), \" \", selectedTransaction.value, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 5\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bloc:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 8\n          }, this), \" \", selectedTransaction.blockNumber.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 5\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 8\n          }, this), \" \", new Date(selectedTransaction.timestamp.toString() * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 5\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger ms-2\",\n          onClick: closeDetail,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Transfer, \"SKeF8gy5WgwKUcSpiJ+I/xxYzBs=\");\n_c = Transfer;\nexport default Transfer;\nvar _c;\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleTransfer","jsxDEV","_jsxDEV","Fragment","_Fragment","Transfer","_s","selectedAccount","setSelectedAccount","accounts","setAccounts","contract","setContract","accountBalance","setAccountBalance","recipient","setRecipient","amount","setAmount","message","setMessage","web3","setWeb3","transactions","setTransactions","selectedTransaction","setSelectedTransaction","isFormOpen","setFormOpen","isDetail","setDetail","init","web3Instance","window","ethereum","request","method","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","contractInstance","Contract","abi","address","length","balance","getBalance","utils","fromWei","loadTransactions","error","console","account","latestBlock","getBlockNumber","toString","i","parseInt","block","getBlock","forEach","tx","toLowerCase","from","transactionDetails","hash","to","value","timestamp","blockNumber","push","handleTransfer","Number","methods","transfer","send","toWei","openForm","closeForm","closeDetail","handleTransactionClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","target","map","index","type","style","cursor","substring","Date","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"./contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\n\nconst Transfer = () => {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n  const [isFormOpen, setFormOpen] = useState(false); // État pour gérer l'affichage du formulaire\n  const [isDetail, setDetail] =useState(false);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n        // Récupérer tous les comptes de Ganache ou MetaMask\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(\n          SimpleTransfer.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n\n \n  \n  \n  const loadTransactions = async (web3Instance, account) => {\n    try {\n      let latestBlock = await web3Instance.eth.getBlockNumber();\n      latestBlock = latestBlock.toString();  // Convertir en chaîne de caractères pour éviter les erreurs BigInt\n  \n      //console.log(`Dernier bloc : ${latestBlock}`);\n  \n      const transactions = [];\n  \n      // Parcourir les blocs récents\n      for (let i = parseInt(latestBlock); i >= parseInt(latestBlock) - 100 && i >= 0; i--) {\n        const block = await web3Instance.eth.getBlock(i, true);\n  \n        // Vérifier s'il y a des transactions dans le bloc\n        if (block && block.transactions.length > 0) {\n          //console.log(`Bloc numéro ${i} contient ${block.transactions.length} transactions`);\n  \n          block.transactions.forEach((tx) => {\n            // Afficher chaque transaction pour voir ses champs\n            //console.log(`Transaction trouvée :`, tx);\n            \n           \n          if ( account.toLowerCase() ===  tx.from.toLowerCase() ) {\n            const transactionDetails = {\n              hash: tx.hash,\n              from: tx.from,\n              to: tx.to,\n              value: web3Instance.utils.fromWei(tx.value, \"ether\"), // Convertir en ETH\n              timestamp: block.timestamp, // Récupérer le timestamp du bloc\n              blockNumber: i\n            };\n            transactions.push(transactionDetails); \n            }\n          });\n        } \n      }\n      setTransactions(transactions);\n      //console.log(`Transactions associées à l'adresse :`, transactions);\n       // Mettre à jour l'état avec les transactions trouvées\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au contrat ou à la blockchain :\", error);\n    }\n  };\n  \n\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount, // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\"), // Utiliser l'instance de web3\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n      \n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n    } catch (error) {\n      setMessage(\"Échec du transfert.\");\n      console.error(error);\n    }\n  };\n\n  \n  const openForm = () => setFormOpen(true); // Ouvrir le formulaire de transfert\n  const closeForm = () => setFormOpen(false); // Fermer le formulaire de transfert\n  const closeDetail =() => setDetail(false);\n \n\n    const handleTransactionClick = (tx) => {\n    setSelectedTransaction(tx); \n    setDetail(true);\n    // Stocker la transaction sélectionnée pour afficher les détails\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center\">Transfert de Cryptomonnaie</h1>\n      {!selectedAccount ? (\n        <button className=\"btn btn-primary\" onClick={() => window.ethereum.request({ method: \"eth_requestAccounts\" })}>\n          Connecter le Compte Principal\n        </button>\n      ) : (\n        <>\n          <h2>Compte : {selectedAccount}</h2>\n          <h2>Solde : {accountBalance} ETH</h2>\n          <button className=\"btn btn-success\" onClick={openForm}>Faire un Transfert</button>\n          <p>{message}</p>\n\n          {/* Formulaire de transfert sous forme de pop-up */}\n          {isFormOpen && (\n            <div className=\"form-popup show card p-4 mt-3\">\n              <h3>Transférer des Ethers</h3>\n              <label>Adresse du Destinataire:</label>\n              <select className=\"form-select mb-3\" value={recipient} onChange={(e) => setRecipient(e.target.value)}>\n                <option value=\"\">Sélectionnez une adresse</option>\n                {accounts.map((account, index) => (\n                  <option key={index} value={account}>\n                    {account}\n                  </option>\n                ))}\n              </select>\n\n              <label>Montant (ETH):</label>\n              <input\n                type=\"number\"\n                className=\"form-control mb-3\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n              />\n\n              <button className=\"btn btn-primary\" onClick={handleTransfer}>Envoyer</button>\n              <button className=\"btn btn-danger ms-2\" onClick={closeForm}>Fermer</button>\n            </div>\n          )}\n\n  {/* Liste des transactions simplifiée */}\n  <h3 className=\"mt-5\">Transactions du Compte Principal</h3>\n          <ul className=\"list-group\">\n            {transactions.length > 0 ? (\n              transactions.map((tx, index) => (\n                <li\n                  key={index}\n                  className=\"list-group-item\"\n                  onClick={() => handleTransactionClick(tx)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <p><strong>Hash :</strong> {tx.hash.substring(0, 10)}...</p>\n                  <p><strong>Montant :</strong> {tx.value} ETH</p>\n                </li>\n              ))\n            ) : (\n              <p>Aucune transaction trouvée.</p>\n            )}\n          </ul>\n\n          \n          {/* Détails de la transaction sélectionnée */}\n          {isDetail && selectedTransaction && (\n            <div className=\"popup show card p-4 mt-0\">\n              <h4>Détails de la Transaction</h4>\n              \n    <p><strong>Hash:</strong> {selectedTransaction.hash}</p>\n    <p><strong>À:</strong> {selectedTransaction.to}</p>\n    <p><strong>Valeur:</strong> {selectedTransaction.value} ETH</p> {/* Afficher directement la valeur */}\n    <p><strong>Bloc:</strong> {selectedTransaction.blockNumber.toString()}</p> {/* Numéro de bloc */}\n    \n    <p><strong>Timestamp:</strong> {new Date(selectedTransaction.timestamp.toString() * 1000).toLocaleString()}</p> {/* Afficher le timestamp sous forme de date */}\n    <button className=\"btn btn-danger ms-2\" onClick={closeDetail}>Fermer</button>\n           \n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Transfer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}