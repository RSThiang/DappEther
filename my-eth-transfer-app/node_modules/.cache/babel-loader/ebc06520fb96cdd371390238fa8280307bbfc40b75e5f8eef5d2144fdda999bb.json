{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from \"react\";\nimport Login from \"./components/connexion\";\nimport Transfer from \"./components/Transfer\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const handleLogin = async () => {\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts'\n      }); // Utiliser eth_accounts pour obtenir les comptes\n      if (accounts.length > 1) {\n        setSelectedAccount(accounts[1]); // Sélectionner le deuxième compte\n      } else {\n        alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion à MetaMask\", error);\n      alert(\"Veuillez autoriser l'accès à votre compte MetaMask.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !selectedAccount ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Bienvenue, \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Transfer, {\n        selectedAccount: selectedAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AZEBinU+nMzMBIaZlxPbuktJ1L0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Login","Transfer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedAccount","setSelectedAccount","handleLogin","accounts","window","ethereum","request","method","length","alert","error","console","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from \"react\";\nimport Login from \"./components/connexion\";\nimport Transfer from \"./components/Transfer\";\n\nconst App = () => {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  const handleLogin = async () => {\n    try {\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' }); // Utiliser eth_accounts pour obtenir les comptes\n      if (accounts.length > 1) {\n        setSelectedAccount(accounts[1]); // Sélectionner le deuxième compte\n      } else {\n        alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion à MetaMask\", error);\n      alert(\"Veuillez autoriser l'accès à votre compte MetaMask.\");\n    }\n  };\n\n  return (\n    <div>\n      {!selectedAccount ? (\n        <Login onLogin={handleLogin} />\n      ) : (\n        <>\n          <h2>Bienvenue, {selectedAccount}</h2>\n          <Transfer selectedAccount={selectedAccount}\n           />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAe,CAAC,CAAC,CAAC,CAAC;MAC5E,IAAIJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;QACvBP,kBAAkB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC,MAAM;QACLM,KAAK,CAAC,8CAA8C,CAAC;MACvD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9DD,KAAK,CAAC,qDAAqD,CAAC;IAC9D;EACF,CAAC;EAED,oBACEd,OAAA;IAAAiB,QAAA,EACG,CAACZ,eAAe,gBACfL,OAAA,CAACH,KAAK;MAACqB,OAAO,EAAEX;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE/BtB,OAAA,CAAAE,SAAA;MAAAe,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,GAAI,aAAW,EAACZ,eAAe;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCtB,OAAA,CAACF,QAAQ;QAACO,eAAe,EAAEA;MAAgB;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA,eACH;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClB,EAAA,CA9BID,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAgCT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}