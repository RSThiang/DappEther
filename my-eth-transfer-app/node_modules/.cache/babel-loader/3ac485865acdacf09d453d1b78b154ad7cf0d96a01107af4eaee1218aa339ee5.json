{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\components\\\\Transfer.js\",\n  _s = $RefreshSig$();\n// src/components/Transfer.js\nimport React, { useState, useEffect } from 'react';\nimport { getWeb3, getContract } from '../web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transfer = ({\n  selectedAccount\n}) => {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [accounts, setAccounts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const contract = await getContract(web3);\n        setAccounts(accounts);\n        setContract(contract);\n        const balance = await contract.methods.getBalance().call();\n        setAccountBalance(balance);\n      } catch (error) {\n        console.error('Error connecting to contract or blockchain', error);\n      }\n    };\n    init();\n  }, []);\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount,\n        // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\")\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n    } catch (error) {\n      setMessage(\"Échec du transfert.\");\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfert de Cryptomonnaie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Compte : \", selectedAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Solde : \", accountBalance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Recipient Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: recipient,\n      onChange: e => setRecipient(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"S\\xE9lectionnez une adresse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account,\n        children: account\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Montant (ETH):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Envoyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Transfer, \"FOPsxyC5H2WehI3GR0lH/97ibNI=\");\n_c = Transfer;\nexport default Transfer;\nvar _c;\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","getContract","jsxDEV","_jsxDEV","Transfer","selectedAccount","_s","contract","setContract","accountBalance","setAccountBalance","recipient","setRecipient","amount","setAmount","accounts","setAccounts","message","setMessage","web3","setWeb3","init","eth","getAccounts","balance","methods","getBalance","call","error","console","handleTransfer","value","Number","transfer","send","from","utils","toWei","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","account","index","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/components/Transfer.js"],"sourcesContent":["// src/components/Transfer.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getWeb3, getContract } from '../web3';\r\n\r\nconst Transfer = ({ selectedAccount }) => {\r\n  const [contract, setContract] = useState(null);\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n  const [recipient, setRecipient] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [web3, setWeb3] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        const web3 = await getWeb3();\r\n        const accounts = await web3.eth.getAccounts();\r\n        const contract = await getContract(web3);\r\n        setAccounts(accounts);\r\n        setContract(contract);\r\n        const balance = await contract.methods.getBalance().call();\r\n        setAccountBalance(balance);\r\n      } catch (error) {\r\n        console.error('Error connecting to contract or blockchain', error);\r\n      }\r\n    };\r\n    init();\r\n  }, []);\r\n\r\n  const handleTransfer = async () => {\r\n    if (!recipient || !amount) {\r\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\r\n      return;\r\n    }\r\n\r\n    const value = Number(amount);\r\n    if (value <= 0 || value > accountBalance) {\r\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await contract.methods.transfer(recipient).send({\r\n        from: selectedAccount, // Utiliser le compte sélectionné\r\n        value: web3.utils.toWei(amount, \"ether\"),\r\n      });\r\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\r\n    } catch (error) {\r\n      setMessage(\"Échec du transfert.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Transfert de Cryptomonnaie</h1>\r\n      <h2>Compte : {selectedAccount}</h2>\r\n      <h2>Solde : {accountBalance} ETH</h2>\r\n      \r\n      <label>Recipient Address:</label>\r\n      <select value={recipient} onChange={(e) => setRecipient(e.target.value)}>\r\n        <option value=\"\">Sélectionnez une adresse</option>\r\n        {accounts.map((account, index) => (\r\n          <option key={index} value={account}>\r\n            {account}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Montant (ETH):</label>\r\n      <input\r\n        type=\"number\"\r\n        value={amount}\r\n        onChange={(e) => setAmount(e.target.value)}\r\n      />\r\n\r\n      <button onClick={handleTransfer}>Envoyer</button>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transfer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}