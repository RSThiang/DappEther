{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\";\nimport Login from './components/connexion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [contractBalance, setContractBalance] = useState(0);\n  const [contractAddress, setContractAddress] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const handleLogin = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts'\n    });\n    // Vérifie que le deuxième compte existe et le sélectionne\n    if (accounts.length > 1) {\n      setSelectedAccount(accounts[1]); // Sélectionne le deuxième compte\n    } else {\n      alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = await getWeb3();\n        const accounts = await web3Instance.eth.getAccounts();\n        console.log(accounts);\n        const contractInstance = await getContract(web3Instance);\n        setAccounts(accounts);\n        setSelectedAccount(accounts[1]); // Sélectionner le premier compte par défaut\n        setContract(contractInstance);\n        setContractAddress(contractInstance.options.address);\n        const balance = await contractInstance.methods.getBalance().call();\n        setContractBalance(balance);\n        setWeb3(web3Instance);\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transfer(recipient).send({\n          from: selectedAccount,\n          // Utiliser le compte sélectionné\n          value: web3.utils.toWei(amount, \"ether\")\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n        const balance = await contract.methods.getBalance().call();\n        setContractBalance(balance);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ETH Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fromAccount\",\n      children: \"From:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fromAccount\",\n      value: selectedAccount,\n      onChange: e => setSelectedAccount(e.target.value) // Mise à jour du compte sélectionné\n      ,\n      children: accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account,\n        children: [`Account ${index + 1}: ${account}`, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipient Address\",\n      value: recipient,\n      onChange: e => setRecipient(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Amount (ETH)\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Send Ether\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Contract Address: \", contractAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Contract Balance: \", web3 ? web3.utils.fromWei(contractBalance, \"ether\") : 1, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uY7APqwA7Qz5tYxeq2phHCRk3Ns=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","getContract","Login","jsxDEV","_jsxDEV","App","_s","accounts","setAccounts","contract","setContract","selectedAccount","setSelectedAccount","recipient","setRecipient","amount","setAmount","message","setMessage","contractBalance","setContractBalance","contractAddress","setContractAddress","web3","setWeb3","handleLogin","window","ethereum","request","method","length","alert","init","web3Instance","eth","getAccounts","console","log","contractInstance","options","address","balance","methods","getBalance","call","error","handleTransfer","transfer","send","from","value","utils","toWei","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","map","account","index","type","placeholder","onClick","fromWei","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getWeb3, getContract } from \"./web3\";\nimport Login from './components/connexion';\n\n\nconst App = () => {\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [contractBalance, setContractBalance] = useState(0);\n  const [contractAddress, setContractAddress] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n\n  const handleLogin = async () => {\n    const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n    // Vérifie que le deuxième compte existe et le sélectionne\n    if (accounts.length > 1) {\n      setSelectedAccount(accounts[1]); // Sélectionne le deuxième compte\n    } else {\n      alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = await getWeb3();\n        const accounts = await web3Instance.eth.getAccounts();\n        console.log(accounts);\n        const contractInstance = await getContract(web3Instance);\n\n        setAccounts(accounts);\n        setSelectedAccount(accounts[1]); // Sélectionner le premier compte par défaut\n        setContract(contractInstance);\n        setContractAddress(contractInstance.options.address);\n\n        const balance = await contractInstance.methods.getBalance().call();\n        setContractBalance(balance);\n        setWeb3(web3Instance);\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n\n  const handleTransfer = async () => {\n    if (contract && recipient && amount) {\n      try {\n        await contract.methods.transfer(recipient).send({\n          from: selectedAccount, // Utiliser le compte sélectionné\n          value: web3.utils.toWei(amount, \"ether\"),\n        });\n        setMessage(`Transferred ${amount} ETH to ${recipient}`);\n\n        const balance = await contract.methods.getBalance().call();\n        setContractBalance(balance);\n      } catch (error) {\n        setMessage(\"Transaction failed.\");\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>ETH Transfer</h1>\n      <label htmlFor=\"fromAccount\">From:</label>\n      <select\n        id=\"fromAccount\"\n        value={selectedAccount}\n        onChange={(e) => setSelectedAccount(e.target.value)} // Mise à jour du compte sélectionné\n      >\n        {accounts.map((account, index) => (\n          <option key={index} value={account}>\n            {`Account ${index + 1}: ${account}`} {/* Affichage de l'adresse */}\n          </option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        placeholder=\"Recipient Address\"\n        value={recipient}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Amount (ETH)\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <button onClick={handleTransfer}>Send Ether</button>\n      <p>{message}</p>\n      <h2>Contract Address: {contractAddress}</h2>\n      <h2>Contract Balance: {web3 ? web3.utils.fromWei(contractBalance, \"ether\") : 1} ETH</h2>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}