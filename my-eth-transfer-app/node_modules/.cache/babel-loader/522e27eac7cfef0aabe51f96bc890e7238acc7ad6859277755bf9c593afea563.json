{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"../contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Transfer = () => {\n  _s();\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [isFormOpen, setFormOpen] = useState(false); // État pour le pop-up\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n\n        // Récupérer tous les comptes de Ganache\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(SimpleTransfer.abi, deployedNetwork && deployedNetwork.address);\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n  const loadTransactions = async (web3Instance, account) => {\n    const latestBlock = await web3Instance.eth.getBlockNumber();\n    const transactions = [];\n    for (let i = latestBlock; i >= 0 && transactions.length < 10; i--) {\n      const block = await web3Instance.eth.getBlock(i, true);\n      if (block && block.transactions) {\n        block.transactions.forEach(tx => {\n          if (tx.from === account || tx.to === account) {\n            transactions.push(tx);\n          }\n        });\n      }\n    }\n    setTransactions(transactions); // Stocker les transactions\n  };\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount,\n        // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\") // Convertir le montant en Wei\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n\n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n      await loadTransactions(web3, selectedAccount); // Recharger les transactions\n      closeForm(); // Fermer le pop-up après le transfert\n    } catch (error) {\n      setMessage(\"Échec du transfert : \" + error.message);\n      console.error(error);\n    }\n  };\n  const openForm = () => setFormOpen(true);\n  const closeForm = () => setFormOpen(false);\n  const handleTransactionClick = tx => {\n    setSelectedTransaction(tx); // Stocker la transaction sélectionnée pour afficher les détails\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Transfert de Cryptomonnaie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), !selectedAccount ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }),\n      children: \"Connecter le Compte Principal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Compte : \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Solde : \", accountBalance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: openForm,\n        children: \"Faire un Transfert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), isFormOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-popup show card p-4 mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Transf\\xE9rer des Ethers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Adresse du Destinataire:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select mb-3\",\n          value: recipient,\n          onChange: e => setRecipient(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"S\\xE9lectionnez une adresse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: account,\n            children: account\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Montant (ETH):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          className: \"form-control mb-3\",\n          value: amount,\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleTransfer,\n          children: \"Envoyer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger ms-2\",\n          onClick: closeForm,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-5\",\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: transactions.map((tx, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          onClick: () => handleTransactionClick(tx),\n          children: [tx.hash.substring(0, 20), \"... \", tx.value && web3.utils.fromWei(tx.value, \"ether\"), \" ETH\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), selectedTransaction && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-4 p-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"D\\xE9tails de la Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hash:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.hash]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"De:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.from]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\xC0:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.to]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Valeur:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.value && web3.utils.fromWei(selectedTransaction.value, \"ether\"), \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bloc:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 18\n          }, this), \" \", selectedTransaction.blockNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(Transfer, \"00kOR7KH1WiHA6N9PHS3oVIS8kk=\");\n_c = Transfer;\nexport default Transfer;\nvar _c;\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleTransfer","jsxDEV","_jsxDEV","Fragment","_Fragment","Transfer","_s","selectedAccount","setSelectedAccount","accounts","setAccounts","contract","setContract","accountBalance","setAccountBalance","recipient","setRecipient","amount","setAmount","message","setMessage","web3","setWeb3","isFormOpen","setFormOpen","transactions","setTransactions","selectedTransaction","setSelectedTransaction","init","web3Instance","window","ethereum","request","method","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","contractInstance","Contract","abi","address","length","balance","getBalance","utils","fromWei","loadTransactions","error","console","account","latestBlock","getBlockNumber","i","block","getBlock","forEach","tx","from","to","push","handleTransfer","value","Number","methods","transfer","send","toWei","closeForm","openForm","handleTransactionClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","target","map","index","type","hash","substring","blockNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["// src/components/Transfer.js\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport SimpleTransfer from \"../contracts/EtherTransfer.json\"; // Assurez-vous que le chemin est correct\n\nconst Transfer = () => {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [web3, setWeb3] = useState(null); // État pour web3\n  const [isFormOpen, setFormOpen] = useState(false); // État pour le pop-up\n  const [transactions, setTransactions] = useState([]); // Transactions\n  const [selectedTransaction, setSelectedTransaction] = useState(null); // Détails de la transaction\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n        // Récupérer tous les comptes de Ganache\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccounts(accounts); // Stocker les comptes\n\n        // Initialisation du contrat\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = SimpleTransfer.networks[networkId];\n        const contractInstance = new web3Instance.eth.Contract(\n          SimpleTransfer.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n        setContract(contractInstance); // Définir le contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n\n        // Sélectionner le premier compte par défaut\n        if (accounts.length > 0) {\n          setSelectedAccount(accounts[0]);\n          // Récupérer le solde du compte sélectionné\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setAccountBalance(web3Instance.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n\n          // Charger les transactions du compte principal\n          await loadTransactions(web3Instance, accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to contract or blockchain\", error);\n      }\n    };\n    init();\n  }, []);\n\n  const loadTransactions = async (web3Instance, account) => {\n    const latestBlock = await web3Instance.eth.getBlockNumber();\n    const transactions = [];\n\n    for (let i = latestBlock; i >= 0 && transactions.length < 10; i--) {\n      const block = await web3Instance.eth.getBlock(i, true);\n      if (block && block.transactions) {\n        block.transactions.forEach((tx) => {\n          if (tx.from === account || tx.to === account) {\n            transactions.push(tx);\n          }\n        });\n      }\n    }\n    setTransactions(transactions); // Stocker les transactions\n  };\n\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount, // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\"), // Convertir le montant en Wei\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n      \n      // Mettre à jour le solde du compte après le transfert\n      const balance = await web3.eth.getBalance(selectedAccount); // Vérifier le nouveau solde\n      setAccountBalance(web3.utils.fromWei(balance, \"ether\")); // Convertir en ETH\n      await loadTransactions(web3, selectedAccount); // Recharger les transactions\n      closeForm(); // Fermer le pop-up après le transfert\n    } catch (error) {\n      setMessage(\"Échec du transfert : \" + error.message);\n      console.error(error);\n    }\n  };\n\n  const openForm = () => setFormOpen(true);\n  const closeForm = () => setFormOpen(false);\n\n  const handleTransactionClick = (tx) => {\n    setSelectedTransaction(tx); // Stocker la transaction sélectionnée pour afficher les détails\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center\">Transfert de Cryptomonnaie</h1>\n      {!selectedAccount ? (\n        <button className=\"btn btn-primary\" onClick={() => window.ethereum.request({ method: \"eth_requestAccounts\" })}>\n          Connecter le Compte Principal\n        </button>\n      ) : (\n        <>\n          <h2>Compte : {selectedAccount}</h2>\n          <h2>Solde : {accountBalance} ETH</h2>\n          <button className=\"btn btn-success\" onClick={openForm}>Faire un Transfert</button>\n          <p>{message}</p>\n\n          {/* Pop-up pour le formulaire de transfert */}\n          {isFormOpen && (\n            <div className=\"form-popup show card p-4 mt-3\">\n              <h3>Transférer des Ethers</h3>\n              <label>Adresse du Destinataire:</label>\n              <select className=\"form-select mb-3\" value={recipient} onChange={(e) => setRecipient(e.target.value)}>\n                <option value=\"\">Sélectionnez une adresse</option>\n                {accounts.map((account, index) => (\n                  <option key={index} value={account}>\n                    {account}\n                  </option>\n                ))}\n              </select>\n\n              <label>Montant (ETH):</label>\n              <input\n                type=\"number\"\n                className=\"form-control mb-3\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n              />\n\n              <button className=\"btn btn-primary\" onClick={handleTransfer}>Envoyer</button>\n              <button className=\"btn btn-danger ms-2\" onClick={closeForm}>Fermer</button>\n            </div>\n          )}\n\n          {/* Afficher la liste des transactions */}\n          <h3 className=\"mt-5\">Transactions</h3>\n          <ul className=\"list-group\">\n            {transactions.map((tx, index) => (\n              <li key={index} className=\"list-group-item\" onClick={() => handleTransactionClick(tx)}>\n                {tx.hash.substring(0, 20)}... {tx.value && web3.utils.fromWei(tx.value, \"ether\")} ETH\n              </li>\n            ))}\n          </ul>\n\n          {/* Détails de la transaction sélectionnée */}\n          {selectedTransaction && (\n            <div className=\"card mt-4 p-3\">\n              <h4>Détails de la Transaction</h4>\n              <p><strong>Hash:</strong> {selectedTransaction.hash}</p>\n              <p><strong>De:</strong> {selectedTransaction.from}</p>\n              <p><strong>À:</strong> {selectedTransaction.to}</p>\n              <p><strong>Valeur:</strong> {selectedTransaction.value && web3.utils.fromWei(selectedTransaction.value, \"ether\")} ETH</p>\n              <p><strong>Bloc:</strong> {selectedTransaction.blockNumber}</p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Transfer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}