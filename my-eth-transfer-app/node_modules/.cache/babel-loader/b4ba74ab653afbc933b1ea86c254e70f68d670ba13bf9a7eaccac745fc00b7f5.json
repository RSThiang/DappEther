{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\components\\\\Transfer.js\",\n  _s = $RefreshSig$();\n// src/components/Transfer.js\nimport React, { useState, useEffect } from 'react';\nimport { getWeb3, getContract } from './web3'; // Assurez-vous que cela pointe vers votre propre fichier web3.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transfer = ({\n  selectedAccount\n}) => {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [accounts, setAccounts] = useState([]);\n  const [message, setMessage] = useState('');\n  const [web3, setWeb3] = useState(null); // Ajouter l'état pour web3\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const web3Instance = await getWeb3(); // Obtenir Web3\n        const accounts = await web3Instance.eth.getAccounts(); // Récupérer les comptes\n        const contract = await getContract(web3Instance); // Obtenir le contrat\n\n        setAccounts(accounts); // Définir les comptes dans l'état\n        setContract(contract); // Définir le contrat dans l'état\n        const balance = await contract.methods.getBalance().call();\n        setAccountBalance(balance); // Récupérer le solde du contrat\n        setWeb3(web3Instance); // Stocker l'instance de web3\n      } catch (error) {\n        console.error('Error connecting to contract or blockchain', error);\n      }\n    };\n    init();\n  }, []);\n  const handleTransfer = async () => {\n    if (!recipient || !amount) {\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\n      return;\n    }\n    const value = Number(amount);\n    if (value <= 0 || value > accountBalance) {\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\n      return;\n    }\n    try {\n      await contract.methods.transfer(recipient).send({\n        from: selectedAccount,\n        // Utiliser le compte sélectionné\n        value: web3.utils.toWei(amount, \"ether\") // Utiliser l'instance de web3\n      });\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\n\n      // Mettre à jour le solde du contrat après le transfert\n      const balance = await contract.methods.getBalance().call();\n      setAccountBalance(balance);\n    } catch (error) {\n      setMessage(\"Échec du transfert.\");\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfert de Cryptomonnaie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Compte : \", selectedAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Solde : \", accountBalance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Recipient Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: recipient,\n      onChange: e => setRecipient(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"S\\xE9lectionnez une adresse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account,\n        children: account\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Montant (ETH):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Envoyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Transfer, \"FOPsxyC5H2WehI3GR0lH/97ibNI=\");\n_c = Transfer;\nexport default Transfer;\nvar _c;\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","getContract","jsxDEV","_jsxDEV","Transfer","selectedAccount","_s","contract","setContract","accountBalance","setAccountBalance","recipient","setRecipient","amount","setAmount","accounts","setAccounts","message","setMessage","web3","setWeb3","init","web3Instance","eth","getAccounts","balance","methods","getBalance","call","error","console","handleTransfer","value","Number","transfer","send","from","utils","toWei","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","account","index","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/components/Transfer.js"],"sourcesContent":["// src/components/Transfer.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getWeb3, getContract } from './web3'; // Assurez-vous que cela pointe vers votre propre fichier web3.js\r\n\r\nconst Transfer = ({ selectedAccount }) => {\r\n  const [contract, setContract] = useState(null);\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n  const [recipient, setRecipient] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [web3, setWeb3] = useState(null); // Ajouter l'état pour web3\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        const web3Instance = await getWeb3(); // Obtenir Web3\r\n        const accounts = await web3Instance.eth.getAccounts(); // Récupérer les comptes\r\n        const contract = await getContract(web3Instance); // Obtenir le contrat\r\n\r\n        setAccounts(accounts); // Définir les comptes dans l'état\r\n        setContract(contract); // Définir le contrat dans l'état\r\n        const balance = await contract.methods.getBalance().call();\r\n        setAccountBalance(balance); // Récupérer le solde du contrat\r\n        setWeb3(web3Instance); // Stocker l'instance de web3\r\n      } catch (error) {\r\n        console.error('Error connecting to contract or blockchain', error);\r\n      }\r\n    };\r\n    init();\r\n  }, []);\r\n\r\n  const handleTransfer = async () => {\r\n    if (!recipient || !amount) {\r\n      setMessage(\"Veuillez entrer une adresse et un montant valides.\");\r\n      return;\r\n    }\r\n\r\n    const value = Number(amount);\r\n    if (value <= 0 || value > accountBalance) {\r\n      setMessage(\"Le montant doit être supérieur à 0 et ne peut pas dépasser le solde.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await contract.methods.transfer(recipient).send({\r\n        from: selectedAccount, // Utiliser le compte sélectionné\r\n        value: web3.utils.toWei(amount, \"ether\"), // Utiliser l'instance de web3\r\n      });\r\n      setMessage(`Transfert de ${amount} ETH vers ${recipient} réussi.`);\r\n      \r\n      // Mettre à jour le solde du contrat après le transfert\r\n      const balance = await contract.methods.getBalance().call();\r\n      setAccountBalance(balance);\r\n    } catch (error) {\r\n      setMessage(\"Échec du transfert.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Transfert de Cryptomonnaie</h1>\r\n      <h2>Compte : {selectedAccount}</h2>\r\n      <h2>Solde : {accountBalance} ETH</h2>\r\n      \r\n      <label>Recipient Address:</label>\r\n      <select value={recipient} onChange={(e) => setRecipient(e.target.value)}>\r\n        <option value=\"\">Sélectionnez une adresse</option>\r\n        {accounts.map((account, index) => (\r\n          <option key={index} value={account}>\r\n            {account}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Montant (ETH):</label>\r\n      <input\r\n        type=\"number\"\r\n        value={amount}\r\n        onChange={(e) => setAmount(e.target.value)}\r\n      />\r\n\r\n      <button onClick={handleTransfer}>Envoyer</button>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transfer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}