{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\deltacoin-project\\\\my-eth-transfer-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Login from './components/connexion';\nimport Transfer from './components/Transfer';\nimport { base } from \"./base.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedAccount, setSelectedAccount] = useState();\n  const handleLogin = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts'\n    });\n    // Vérifie que le deuxième compte existe et le sélectionne\n    console.log(accounts);\n    if (accounts.length > 1) {\n      setSelectedAccount(base.adresse); // Sélectionne le deuxième compte\n    } else {\n      alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !selectedAccount ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Bienvenue, \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Transfer, {\n        selectedAccount: selectedAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uY0X5Zm4i/zuDIgq5gzbTJkNajE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Login","Transfer","base","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedAccount","setSelectedAccount","handleLogin","accounts","window","ethereum","request","method","console","log","length","adresse","alert","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/deltacoin-project/my-eth-transfer-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Login from './components/connexion';\nimport Transfer from './components/Transfer';\nimport { base } from \"./base.json\";\n\nconst App = () => {\n  const [selectedAccount, setSelectedAccount] = useState();\n\n  const handleLogin = async () => {\n    const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n    // Vérifie que le deuxième compte existe et le sélectionne\n    console.log(accounts);\n    if (accounts.length > 1) {\n      setSelectedAccount(base.adresse); // Sélectionne le deuxième compte\n    } else {\n      alert(\"Il n'y a pas assez de comptes dans MetaMask.\");\n    }\n  };\n\n  return (\n    <div>\n      {!selectedAccount ? (\n        <Login onLogin={handleLogin} />\n      ) : (\n        <>\n          <h2>Bienvenue, {selectedAccount}</h2>\n          <Transfer selectedAccount={selectedAccount} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAExD,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAe,CAAC,CAAC;IAC1E;IACAC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;IACrB,IAAIA,QAAQ,CAACO,MAAM,GAAG,CAAC,EAAE;MACvBT,kBAAkB,CAACR,IAAI,CAACkB,OAAO,CAAC,CAAC,CAAC;IACpC,CAAC,MAAM;MACLC,KAAK,CAAC,8CAA8C,CAAC;IACvD;EACF,CAAC;EAED,oBACEjB,OAAA;IAAAkB,QAAA,EACG,CAACb,eAAe,gBACfL,OAAA,CAACJ,KAAK;MAACuB,OAAO,EAAEZ;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE/BvB,OAAA,CAAAE,SAAA;MAAAgB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,GAAI,aAAW,EAACb,eAAe;MAAA;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCvB,OAAA,CAACH,QAAQ;QAACQ,eAAe,EAAEA;MAAgB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC9C;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CA1BID,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA4BT,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}